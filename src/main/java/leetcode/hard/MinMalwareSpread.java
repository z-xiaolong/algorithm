package leetcode.hard;

import java.util.Arrays;

/**
 * @Author long
 * @Date 2021/11/15 11:35
 * @Title
 * @Description //TODO
 **/

public class MinMalwareSpread {

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        UnionSet unionSet = new UnionSet(n);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (graph[i][j] == 1) {
                    unionSet.union(i, j);
                }
            }
        }
        int[] cnt = new int[n];
        for (int k : initial) {
            cnt[unionSet.find(k)]++;
        }
        int ans = -1;
        int max = 0;
        for (int k : initial) {
            int p = unionSet.find(k);
            int size = unionSet.size(p);
            if (cnt[p] == 1) {
                if (max < size) {
                    ans = k;
                    max = size;
                } else if (max == size && k < ans) {
                    ans = k;
                }
            }
        }
        if (ans == -1) {
            return Arrays.stream(initial).min().getAsInt();
        }
        return ans;
    }

    class UnionSet {
        int[] parent;
        int[] size;

        public UnionSet(int n) {
            parent = new int[n];
            size = new int[n];
            for (int i = 0; i < n; i++) {
                parent[i] = i;
                size[i] = 1;
            }
        }

        public void union(int x, int y) {
            if (x == y) return;
            int pX = find(x);
            int pY = find(y);
            parent[pX] = pY;
            size[pY] += size[pX];
        }

        public int find(int x) {
            while (parent[x] != x) {
                x = parent[x];
            }
            return x;
        }

        public int size(int x) {
            return size[x];
        }
    }
}
